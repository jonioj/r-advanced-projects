install.packages("MASS")
install.packages("ggplot2")
#wczytanie danych (wybrano jedynie zestaw danych z białymi winami)
data <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv",sep=';')
#przygotowanie danych
data <- data[2:4899,1:12]
colnames(data) <-
c("fixedAcidity",
"volatileAcidity",
"citricAcid",
"residualSugar",
"chlorides",
"freeSulfurDioxide",
"totalSulfurDioxide",
"density",
"pH",
"sulphates",
"alcohol",
"quality")
data <- data.frame(lapply(data, as.numeric))
data$quality <- as.factor(data$quality)
levels(data$quality) <- c(1:7)  #usunięcie jakości 8, 9 i 10 ze względu na brak win o takiej jakości
library(caret)
head(data)
summary(data$quality)
#wizualna eksploracja danych
par(mfrow=c(3,4))
for(i in 1:11){
boxplot(data[[i]] ~ quality, data = data, main=names(data)[i])
}; rm(i)
par(mfrow=c(1,1))
corrgram::corrgram(data[,1:11], order=TRUE,
lower.panel=corrgram::panel.ellipse,
upper.panel=corrgram::panel.shade, text.panel=corrgram::panel.txt)
#pca
pca1 <- prcomp(data[,1:11], center = TRUE, scale. = TRUE)
summary(pca1)
pca2 <- prcomp(data[,1:11], center = FALSE, scale. = FALSE)
summary(pca2)
#niezbalansowanie danych
dataB <- caret::upSample(x = data[,-11], y = data$quality)
summary(dataB$quality)
#podział danych na treningowe i testowe
set.seed(1)
ind1 <- caret::createDataPartition(data$quality, p = 0.7,
list=FALSE)
train1 <- data[ind1,]
test1 <- data[-ind1,]
set.seed(2)
ind2 <- caret::createDataPartition(dataB$quality, p = 0.7,
list=FALSE)
train2 <- dataB[ind2,]
test2 <- dataB[-ind2,]
#uczenie na niezbalansowanych danych
#metoda k-nearest neighbours
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train1, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
kknn.train <- train(quality ~ ., data = train1, method = "kknn",
preProcess = c("center", "scale"))
View(dataB)
View(dataB)
summary(dataB$quality)
plot(kknn.train)
kknn.train$bestTune
#ocena dokładności metod dla niezbalansowanych danych
kknn.predict <- predict(kknn.train, test1)
caret::confusionMatrix(kknn.predict, test1$quality)
summary(test1)
kknn.train2 <- train(quality ~ ., data = train2, method = "kknn",
preProcess = c("center", "scale"))
View(data)
View(dataB)
1:11
#pca
pca1 <- prcomp(data[,-12], center = TRUE, scale. = TRUE)
summary(pca1)
#niezbalansowanie danych
dataB <- caret::upSample(x = data[,-12], y = data$quality)
summary(dataB$quality)
summary(dataB)
summary(dataB)
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=")(.*)')
print(title[3])
}
View(title)
View(title)
title[3]
title = str_spliot(title[3],'"')
title = str_split(title[3],'"')
View(title)
titlke
title
title[1]
title[[1]
]
View(title)
?str_split
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=")(.*)')
print(title[3])
}
title
title
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)')
print(title[3])
}
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
print(title[3])
}
title[3]
title[3]
View(title)
t = title[3]
t
t = str_split(t,'\"')
t
View(t)
View(t)
t
t[[1]]
t[1]
a = t[[1]]
a
a= a[1]
a
t = title[3][1]
t = str_split(title[3][1],'\"'
t
t
t = str_split(title[3][1],'\"')
t
t[1][1]
t
t = t[1]
t
t = t[1][1]
t
View(t)
a = t[1]
View(a)
a = t[[1]]
a
a[1]
a = t[[1]][1]
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
print(title[3])
}
t = str_split(title[3][1],'\"')
title = t[[1]][1]
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t= t[[1]][1]
}
View(title)
t = str_split(title[3][1],'\"')
t
t[1][1]
t[1][1][1]
t[1][1][1][1]
t[1][[1]
]
t[[1]
]
t[[1]][1]
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t= t[[1]][1]
}
for (i in 1:length(imp)){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t= t[[1]][1]
cat(t)
}
for (i in 1:length(imp)){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t= t[[1]][1]
print(t)
}
for (i in 1:length(imp)){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t= t[[1]][1]
print(is.na(t))
print(t)
}
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
title
titles
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
titles
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
paragraph = str_match_all(f,'class=\"project-card-wrapper\"')
imp = c()
paragraph_l = length(paragraph)
for (x in 1:paragraph_l)  {
if (!is.na(paragraph[[x]][,][1])) {
imp = c(imp,x)
}
}
titles = c()
for (i in 1:length(imp)){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t = t[[1]][1]
if (!is.na(t)){
titles = c(titles,t)
}
titles
}
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
imp[1]
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
load_page_data()
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
setwd("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_2.R")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_2.R")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_2.R")
?mean
source("project_2_1.R")
data = load_page_data()
titles = get_promoted_projects(data)
show_projects(titles)
