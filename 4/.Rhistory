install.packages("MASS")
install.packages("ggplot2")
#wczytanie danych (wybrano jedynie zestaw danych z białymi winami)
data <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv",sep=';')
#przygotowanie danych
data <- data[2:4899,1:12]
colnames(data) <-
c("fixedAcidity",
"volatileAcidity",
"citricAcid",
"residualSugar",
"chlorides",
"freeSulfurDioxide",
"totalSulfurDioxide",
"density",
"pH",
"sulphates",
"alcohol",
"quality")
data <- data.frame(lapply(data, as.numeric))
data$quality <- as.factor(data$quality)
levels(data$quality) <- c(1:7)  #usunięcie jakości 8, 9 i 10 ze względu na brak win o takiej jakości
library(caret)
head(data)
summary(data$quality)
#wizualna eksploracja danych
par(mfrow=c(3,4))
for(i in 1:11){
boxplot(data[[i]] ~ quality, data = data, main=names(data)[i])
}; rm(i)
par(mfrow=c(1,1))
corrgram::corrgram(data[,1:11], order=TRUE,
lower.panel=corrgram::panel.ellipse,
upper.panel=corrgram::panel.shade, text.panel=corrgram::panel.txt)
#pca
pca1 <- prcomp(data[,1:11], center = TRUE, scale. = TRUE)
summary(pca1)
pca2 <- prcomp(data[,1:11], center = FALSE, scale. = FALSE)
summary(pca2)
#niezbalansowanie danych
dataB <- caret::upSample(x = data[,-11], y = data$quality)
summary(dataB$quality)
#podział danych na treningowe i testowe
set.seed(1)
ind1 <- caret::createDataPartition(data$quality, p = 0.7,
list=FALSE)
train1 <- data[ind1,]
test1 <- data[-ind1,]
set.seed(2)
ind2 <- caret::createDataPartition(dataB$quality, p = 0.7,
list=FALSE)
train2 <- dataB[ind2,]
test2 <- dataB[-ind2,]
#uczenie na niezbalansowanych danych
#metoda k-nearest neighbours
t.ctrl <- trainControl(method = "repeatedcv", number = 5, repeats = 5)
kknn.grid <- expand.grid(kmax = c(3, 5, 7 ,9, 11), distance = c(1, 2),
kernel = c("rectangular", "gaussian", "cos"))
kknn.train <- train(quality ~ ., data = train1, method = "kknn",
trControl = t.ctrl, tuneGrid = kknn.grid,
preProcess = c("center", "scale"))
kknn.train <- train(quality ~ ., data = train1, method = "kknn",
preProcess = c("center", "scale"))
View(dataB)
View(dataB)
summary(dataB$quality)
plot(kknn.train)
kknn.train$bestTune
#ocena dokładności metod dla niezbalansowanych danych
kknn.predict <- predict(kknn.train, test1)
caret::confusionMatrix(kknn.predict, test1$quality)
summary(test1)
kknn.train2 <- train(quality ~ ., data = train2, method = "kknn",
preProcess = c("center", "scale"))
View(data)
View(dataB)
1:11
#pca
pca1 <- prcomp(data[,-12], center = TRUE, scale. = TRUE)
summary(pca1)
#niezbalansowanie danych
dataB <- caret::upSample(x = data[,-12], y = data$quality)
summary(dataB$quality)
summary(dataB)
summary(dataB)
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/2/project_2_1.R")
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=")(.*)')
print(title[3])
}
View(title)
View(title)
title[3]
title = str_spliot(title[3],'"')
title = str_split(title[3],'"')
View(title)
titlke
title
title[1]
title[[1]
]
View(title)
?str_split
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=")(.*)')
print(title[3])
}
title
title
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)')
print(title[3])
}
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
print(title[3])
}
title[3]
title[3]
View(title)
t = title[3]
t
t = str_split(t,'\"')
t
View(t)
View(t)
t
t[[1]]
t[1]
a = t[[1]]
a
a= a[1]
a
t = title[3][1]
t = str_split(title[3][1],'\"'
t
t
t = str_split(title[3][1],'\"')
t
t[1][1]
t
t = t[1]
t
t = t[1][1]
t
View(t)
a = t[1]
View(a)
a = t[[1]]
a
a[1]
a = t[[1]][1]
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
print(title[3])
}
t = str_split(title[3][1],'\"')
title = t[[1]][1]
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t= t[[1]][1]
}
View(title)
t = str_split(title[3][1],'\"')
t
t[1][1]
t[1][1][1]
t[1][1][1][1]
t[1][[1]
]
t[[1]
]
t[[1]][1]
for (i in 1:1){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t= t[[1]][1]
}
for (i in 1:length(imp)){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t= t[[1]][1]
cat(t)
}
for (i in 1:length(imp)){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t= t[[1]][1]
print(t)
}
for (i in 1:length(imp)){
print(i)
title = str_match(file[imp[i]], '(title=\")(.*)(\")')
t = str_split(title[3][1],'\"')
t= t[[1]][1]
print(is.na(t))
print(t)
}
install.packages("terra")
shiny::runApp('Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/3')
runApp('Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/3')
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/4/project_4_2.R")
setwd("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/4")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/4/project_4_2.R")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/4/project_4_2.R")
source("~/Moje/PW/Przedmioty do zrobienia/2022L/R_zaawansowne/projekty/4/project_4_2.R")
library(shiny)
library(gganimate)
heart = read.csv('heart.csv')
# now make the animation
age <- heart[order(heart$age),]
ggplot(age, aes(factor(sex), chol)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
age,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
age <- heart[order(heart$age),]
ggplot(age, aes(factor(sex), chol)) + geom_boxplot() + labs(x = 'Sex', y = 'Cholesterole')
ggplot(age, aes(factor(sex), chol)) + geom_boxplot() + labs(x = 'Sex', y = 'Cholesterole') +
transition_states(
age,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
age <- heart[order(heart$age),]
ggplot(age, aes(factor(sex), chol)) + geom_boxplot() + labs(x = 'Sex', y = 'Cholesterole') +
transition_states(
age,
transition_length = 5,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
ggplot(age, aes(factor(sex), chol)) + geom_boxplot() + labs(title = '{frame_time}', x = 'Sex', y = 'Cholesterole') +
transition_states(
age,
transition_length = 5,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
library(gapminder)
install.packages("gapminder")
library(gapminder)
ggplot (gapminder, aes (gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point (alpha = 0.7, show.legend = FALSE) +
scale_colour_manual (values = country_colors) +
scale_size (range = c(2, 12)) +
scale_x_log10 () +
facet_wrap (~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
ggplot(age, aes(factor(sex), chol)) + geom_boxplot() + labs(title = 'Mean cholesterole with age', x = 'Sex', y = 'Cholesterole') +
transition_states(
age,
transition_length = 5,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
runApp('project_4.1.R')
runApp('project_4.1.R')
heart = read.csv('heart.csv')
age <- heart[order(heart$age),]
ggplot(age, aes(factor(sex), chol)) + geom_boxplot() + labs(title = 'Mean cholesterole with age', x = 'Sex', y = 'Cholesterole') +
transition_states(
age,
transition_length = 5,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
anim_save("outfile.gif", animate(p)) # New
p = ggplot(age, aes(factor(sex), chol)) + geom_boxplot() + labs(title = 'Mean cholesterole with age', x = 'Sex', y = 'Cholesterole') +
transition_states(
age,
transition_length = 5,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
anim_save("outfile.gif", animate(p)) # New
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
summary(mtcars)
runApp('project_4.1.R')
runApp('project_4.1.R')
gg_point <- ggplot(mtcars) + geom_point_interactive (aes (x = hp,
y = qsec,
color = mpg,
size = mpg,
)) +theme_bw()
girafe(ggobj = gg_point)
gg_point <- ggplot(mtcars) + geom_point_interactive (aes (x = hp,
y = qsec,
color = mpg,
size = mpg,
tooltip = gear
)) +theme_bw()
girafe(ggobj = gg_point)
runApp('project_4.1.R')
View(heart)
View(heart)
View(heart)
runApp('project_4.1.R')
runApp('project_4.1.R')
View(heart)
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
gg_1 <- ggplot(heart) + geom_point_interactive (aes (x = age,
y = chol,
color = factor(sex)
)) +theme_bw()
gg_2 <- ggplot(heart) + geom_point_interactive (aes (x = age,
y = trestbps,
color = factor(sex)
)) +theme_bw()
girafe(code = print(gg_1 + gg_2)) %>% girafe_options(opts_hover(css = 'fill:black;'))
girafe(code = print(gg_1 + gg_2), width_svg = 8, height_svg = 4) %>% girafe_options(opts_hover(css = 'fill:black;'))
library(patchwork)
gg_1 <- ggplot(heart) + geom_point_interactive (aes (x = age,
y = chol,
color = factor(sex)
)) +theme_bw()
gg_2 <- ggplot(heart) + geom_point_interactive (aes (x = age,
y = trestbps,
color = factor(sex)
)) +theme_bw()
girafe(code = print(gg_1 + gg_2), width_svg = 8, height_svg = 4) %>% girafe_options(opts_hover(css = 'fill:black;'))
gg_1 <- ggplot(heart) + geom_point_interactive (aes (x = age,
y = chol,
color = factor(sex),
tooltip = age
)) +theme_bw()
gg_2 <- ggplot(heart) + geom_point_interactive (aes (x = age,
y = trestbps,
color = factor(sex),
tooltip = age
)) +theme_bw()
girafe(code = print(gg_1 + gg_2), width_svg = 8, height_svg = 4) %>% girafe_options(opts_hover(css = 'fill:black;'))
girafe(code = print(gg_1 + gg_2), width_svg = 8, height_svg = 4) %>% girafe_options(opts_hover(css = 'fill:black'))
x = girafe(gg_1)
x <- girafe_options(x,opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
if( interactive() ) print(x)
print(x)
View(x)
gg_1 <- ggplot(heart) + geom_point_interactive (aes (x = age,
y = chol,
color = factor(sex),
tooltip = age
)) +theme_bw()
x = girafe(gg_1)
library(ggplot2)
dataset <- mtcars
dataset$carname = row.names(mtcars)
gg <- ggplot(
data = dataset,
mapping = aes(x = wt, y = qsec, color = disp,
tooltip = carname, data_id = carname) ) +
geom_point_interactive() + theme_minimal()
x <- girafe(ggobj = gg)
x <- girafe_options(x,
opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
if( interactive() ) print(x)
x = girafe(ggobj = gg_1)
x <- girafe_options(x,opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
print(x)
gg_1 <- ggplot(heart) + geom_point_interactive (aes (x = age,
y = chol,
tooltip = age
)) +theme_bw()
x = girafe(ggobj = gg_1)
x <- girafe_options(x,opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
print(x)
gg_1 <- ggplot(heart) + geom_point_interactive (aes (x = age,
y = chol,
tooltip = age
))
x = girafe(ggobj = gg_1)
x <- girafe_options(x,opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
print(x)
gg <- ggplot(
data = heart,
mapping = aes(x = age, y = trestbps) ) +
geom_point_interactive() + theme_minimal()
x <- girafe(ggobj = gg)
x <- girafe_options(x,
opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
if( interactive() ) print(x)
gg <- ggplot(
data = heart,
mapping = aes(x = age, y = trestbps) ) +
geom_point_interactive() + theme_minimal()
x <- girafe(ggobj = gg)
x <- girafe_options(x,
opts_hover(css = "stroke:orange;r:5pt;") )
if( interactive() ) print(x)
library(ggplot2)
dataset <- mtcars
dataset$carname = row.names(mtcars)
gg <- ggplot(
data = dataset,
mapping = aes(x = wt, y = qsec, color = disp,
tooltip = carname, data_id = carname) ) +
geom_point_interactive() + theme_minimal()
x <- girafe(ggobj = gg)
x <- girafe_options(x,
opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
if( interactive() ) print(x)
gg <- ggplot(
data = heart,
mapping = aes(x = age, y = trestbps, color = factor(sex),
tooltip = age, data_id = restecg) ) +
geom_point_interactive() + theme_minimal()
x <- girafe(ggobj = gg)
x <- girafe_options(x,
opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
if( interactive() ) print(x)
gg <- ggplot(
data = heart,
mapping = aes(x = age, y = trestbps, color = factor(sex),
tooltip = age, data_id = sex) ) +
geom_point_interactive() + theme_minimal()
x <- girafe(ggobj = gg)
x <- girafe_options(x,
opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
if( interactive() ) print(x)
gg <- ggplot(
data = heart,
mapping = aes(x = age, y = trestbps, color = factor(sex),
tooltip = age, data_id = age) ) +
geom_point_interactive() + theme_minimal()
x <- girafe(ggobj = gg)
x <- girafe_options(x,
opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
if( interactive() ) print(x)
gg <- ggplot(
data = heart,
mapping = aes(x = age, y = trestbps, color = factor(sex),
tooltip = age, data_id = cp) ) +
geom_point_interactive() + theme_minimal()
x <- girafe(ggobj = gg)
x <- girafe_options(x,
opts_hover(css = "fill:wheat;stroke:orange;r:5pt;") )
if( interactive() ) print(x)
View(heart)
runApp('project_4.1.R')
runApp('project_4.1.R')
runApp('project_4.1.R')
